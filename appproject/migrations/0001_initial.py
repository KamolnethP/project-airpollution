# Generated by Django 4.0.5 on 2023-01-31 07:48

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='DataSetGroup',
            fields=[
                ('dataSetGroupId', models.IntegerField(primary_key=True, serialize=False)),
                ('dataSetGroupName', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='DataUpload',
            fields=[
                ('dataId', models.AutoField(primary_key=True, serialize=False)),
                ('dataName', models.CharField(max_length=255)),
                ('descripton', models.CharField(max_length=255)),
                ('metaDataId', models.IntegerField()),
                ('dataSetgroupId', models.IntegerField()),
                ('provinceId', models.IntegerField()),
                ('fileName', models.CharField(max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='FieldName',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fieldName', models.CharField(max_length=255)),
                ('metaDataName', models.CharField(max_length=255)),
                ('dataId', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Metadata',
            fields=[
                ('metadataId', models.AutoField(primary_key=True, serialize=False)),
                ('metadataName', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Province',
            fields=[
                ('provinceid', models.IntegerField(primary_key=True, serialize=False)),
                ('code', models.CharField(max_length=2)),
                ('name_th', models.CharField(max_length=150)),
                ('name_en', models.CharField(max_length=150)),
                ('geography_id', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Download',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('userRequestId', models.IntegerField()),
                ('datetime', models.DateTimeField(auto_now_add=True)),
                ('dataId', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='downloads', to='appproject.dataupload')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.CharField(max_length=255, unique=True)),
                ('password', models.CharField(max_length=255)),
                ('userId', models.AutoField(primary_key=True, serialize=False)),
                ('agencyName', models.CharField(max_length=255)),
                ('userNameAgency', models.CharField(max_length=255)),
                ('firstnameUserRequest', models.CharField(max_length=255)),
                ('lastnameUserRequest', models.CharField(max_length=255)),
                ('agencyNameRequest', models.CharField(max_length=255)),
                ('isAgency', models.BooleanField(default=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
